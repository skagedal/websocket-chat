import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "application"
    id "pmd"
    id "jacoco"
    id "com.diffplug.spotless" version "6.0.0"
    id "com.github.spotbugs" version "4.7.9"
    id "com.github.ben-manes.versions" version "0.42.0"
}

repositories {
    mavenCentral()
}

def versions = [
        vertx: '4.3.0',
        testcontainers: '1.17.1',
        jackson: '2.13.2.2'
]

dependencies {
    implementation platform("io.vertx:vertx-stack-depchain:${versions.vertx}")
    implementation "io.vertx:vertx-core"
    implementation "io.vertx:vertx-web"
    implementation "io.vertx:vertx-web-client"
    implementation "io.vertx:vertx-redis-client"
    implementation "io.vertx:vertx-rx-java3"
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    implementation "org.slf4j:slf4j-api:1.7.36"
    runtimeOnly "org.slf4j:slf4j-simple:1.7.36"

    compileOnly "com.github.spotbugs:spotbugs-annotations:4.5.0"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation "io.vertx:vertx-junit5:${versions.vertx}"
    testImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
    testImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:4.5.0"
}

application {
    mainClass = 'se.kry.chat.App'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Werror"
}

// PMD

pmd {
    //  consoleOutput = true
    ruleSets = []
    ruleSetConfig = resources.text.fromFile("pmd.xml")
}

// Spotbugs

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

// Testing

test {
    systemProperty "vertx.logger-delegate-factory-class-name", "io.vertx.core.logging.SLF4JLogDelegateFactory"
//    systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
    testLogging.showStandardStreams = true
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = true
    }
    //noinspection GroovyAssignabilityCheck
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/generated/**')
        }))
    }
}

// Spotless

spotless {
    java {
        googleJavaFormat()
    }
}

// Dependency updates

// Example check to exclude non-stable versions in recommendations from https://github.com/ben-manes/gradle-versions-plugin
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
dependencyUpdates.gradleReleaseChannel="current"